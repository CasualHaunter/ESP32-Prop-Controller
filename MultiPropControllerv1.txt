// MUST EDIT: Wifi Credentials, Static IP
// Optional Edit: Button names, delay time for relay buttons

// Multi-Prop Web Controller v1.0
// For use on ESP32 DEVKIT V1 in Arduino IDE
// Must apply ESPAsyncWebsever.h in Arduino IDE, library does not exist by default
// Programmed by Casual Haunter (Youtube)

// Libraries for wifi and web server
#include <WiFi.h>
#include <ESPAsyncWebServer.h>

// WiFi credentials, MUST EDIT
const char* ssid = "YOUR_SSID_HERE";
const char* password = "YOUR_PASSWORD_HERE";

// Static IP configuration. Default set to common IP. MUST EDIT THIS AND SET STATIC RANGE IN ROUTER
IPAddress staticIP(192, 168, 1, 250); // Set your desired static IP address
IPAddress gateway(192, 168, 1, 1);    // Set your gateway IP address
IPAddress subnet(255, 255, 255, 0);   // Set your subnet mask
IPAddress dns1(8, 8, 8, 8);           // Set your DNS server 1
IPAddress dns2(8, 8, 4, 4);           // Set your DNS server 2

// Button names on web interface, custom option
String buttonD4 = "D4";     //Default D4     
String buttonD13 = "D13";   //Default D13
String buttonD14 = "D14";   //Default D14
String buttonRX2 = "RX2";   //Default RX2
String buttonTX2 = "TX2";   //Default TX2
String buttonD18 = "D18";   //Default D18
String buttonD21 = "D21";   //Default D21
String buttonD22 = "D22";   //Default D22
String buttonD23 = "D23";   //Default D23
String buttonD25 = "D25";   //Default D25
String buttonD26 = "D26";   //Default D26
String buttonD27 = "D27";   //Default D27
String buttonD32 = "D32";   //Default D32
String buttonD33 = "D33";   //Default D33

// Relay trigger time in milliseconds, change this to your needed time (RX2/TX2). MAXIMUM 3000, may be unstable 
const unsigned long delayTimeRelay = 2500; 

// Defining GPIO pins. All pins unused by the board fucntions are accounted for here. This is where the GPIO pin number is matched to the label on the board.
const int pinD4 = 4; 
const int pinD13 = 13;
const int pinD14 = 14;
const int pinRX2 = 16;
const int pinTX2 = 17;
const int pinD18 = 18;
const int pinD19 = 19;
const int pinD21 = 21;
const int pinD22 = 22;
const int pinD23 = 23;
const int pinD25 = 25;
const int pinD26 = 26;
const int pinD27 = 27;
const int pinD32 = 32;
const int pinD33 = 33;

// Create an instance of the server for accepting GET URL requests.
AsyncWebServer server(80);

// Pins corresponding to each button
const int buttonPins[] = {4, 13, 14, 16, 17, 18, 21, 22, 23, 25, 26, 27, 32, 33};
const int numButtons = sizeof(buttonPins) / sizeof(buttonPins[0]);


void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi with static IP configuration, do not change these
  WiFi.config(staticIP, gateway, subnet, dns1, dns2);
  WiFi.begin(ssid, password);

  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting...");
  }

  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

// Defines each GPIO pin as an input or output
  pinMode(pinD4, OUTPUT);
  pinMode(pinD13, OUTPUT);
  pinMode(pinD14, OUTPUT);
  pinMode(pinRX2, OUTPUT);
  pinMode(pinTX2, OUTPUT);
  pinMode(pinD18, OUTPUT);
  pinMode(pinD19, INPUT_PULLUP);  // Step pad passthrough to D21, touch capacitance disabled
  pinMode(pinD21, OUTPUT);
  pinMode(pinD22, OUTPUT);
  pinMode(pinD23, OUTPUT);
  pinMode(pinD25, OUTPUT);
  pinMode(pinD26, OUTPUT);
  pinMode(pinD27, OUTPUT);
  pinMode(pinD32, OUTPUT);
  pinMode(pinD33, OUTPUT);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  // Define URL handlers for each pin, this defines what command goes in the GET URL. 
  server.on("/triggerD4", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD4, request); //This makes the GET URL "http://192.168.1.x/triggerD4" activate this function
  });
  server.on("/triggerD13", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD13, request);
  });
  server.on("/triggerD14", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD14, request);
  });
  server.on("/triggerRX2", HTTP_GET, [](AsyncWebServerRequest *request){ //Long for relay
    togglePinLong(pinRX2, request);
  });
  server.on("/triggerTX2", HTTP_GET, [](AsyncWebServerRequest *request){ //Long for relay
    togglePinLong(pinTX2, request);
  });
  server.on("/triggerD18", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD18, request);
  });
  server.on("/triggerD19", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD19, request);
  });
  server.on("/triggerD21", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD21, request);
  });
  server.on("/triggerD22", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD22, request);
  });
  server.on("/triggerD23", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD23, request);
  });
  server.on("/triggerD25", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD25, request);
  });
  server.on("/triggerD26", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD26, request);
  });
  server.on("/triggerD27", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD27, request);
  });
  server.on("/triggerD32", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD32, request);
  });
  server.on("/triggerD33", HTTP_GET, [](AsyncWebServerRequest *request){
    togglePin(pinD33, request);
  });

 // Initial GPIO pin power states
  digitalWrite(pinD4, LOW);
  digitalWrite(pinD13, LOW);
  digitalWrite(pinD14, LOW);
  digitalWrite(pinRX2, LOW);
  digitalWrite(pinTX2, LOW);
  digitalWrite(pinD18, LOW);
  digitalWrite(pinD19, HIGH); //Step Pad Passthrough
  digitalWrite(pinD21, LOW);
  digitalWrite(pinD22, LOW);
  digitalWrite(pinD23, LOW);
  digitalWrite(pinD25, LOW);
  digitalWrite(pinD26, LOW);
  digitalWrite(pinD27, LOW);
  digitalWrite(pinD32, LOW);
  digitalWrite(pinD33, LOW);

// Route to serve the HTML page, mystery stuff happens here
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    String html = "<html><head><title>&#x1F383; Multi-Prop Web Controller &#x1F383;</title>";
    html += "<style>";
    html += ".buttons { display: grid; grid: repeat(5, 20%) / auto-flow 20%; } ";
    html += "button { padding: 12px; width: 90%; margin: 12px auto; background-color: #6699FF; border: 0; color: white; border-radius: 4px;}";
    html += "</style>";
    html += "</head><body>";
    html += "<h1>&#x1F383; Multi-Prop Web Controller &#x1F383;</h1>";
    html += "<div class='buttons'>";
    for (int i = 0; i < numButtons; i++) {
      html += "<button onclick='sendRequest(\"" + getButtonCode(i) + "\")'>" + getButtonLabel(i) + "</button>";
    }
    html += "</div>";
    html += "<script>function sendRequest(buttonNumber) { var xhr = new XMLHttpRequest(); xhr.open('GET', '/trigger' + buttonNumber, true); xhr.onreadystatechange = function() { if (xhr.readyState === 4 && xhr.status === 200) { console.log(xhr.responseText); } }; xhr.send(); }</script>";
    html += "</body></html>";
    request->send(200, "text/html", html);
  });


  // Start the server, seems good
  server.begin();
}

//Short triggers with pin default to high to mimic step pads 
void togglePin(int pin, AsyncWebServerRequest *request) {  
  digitalWrite(pin, HIGH); // Turn the GPIO pin on
  delay(500); // Wait for 500 milliseconds
  digitalWrite(pin, LOW); // Turn the GPIO pin back off
  delay(500); // Wait for another 500 milliseconds
  request->send(200, "text/plain", "GPIO pin toggled.");
}

//Long trigger with pin default to low for relay switches
void togglePinLong(int pin, AsyncWebServerRequest *request) { 
  digitalWrite(pin, HIGH); // Turn the GPIO pin on
  delay(delayTimeRelay); // Activate for defined period up top
  digitalWrite(pin, LOW); // Turn the GPIO pin back off
  request->send(200, "text/plain", "GPIO pin toggled.");
}

void loop() {

  // Read the state of the singular input pin
  int inputValue = digitalRead(pinD19);

  // Check if the input pin is LOW (button pressed), used for a step pad passthrough
  if (inputValue == LOW) {
    // If the input is LOW, set the output pin to HIGH
    digitalWrite(pinD21, HIGH);
    delay(500); // Delay for 500ms
    digitalWrite(pinD21, LOW); // Turn off the output after the delay
    delay(500);
  }
}

String getButtonLabel(int buttonIndex) {
  // Define button labels based on the index
  switch (buttonIndex) {
    case 0: return buttonD4;        // Default D4
    case 1: return buttonD13;       // Default D13
    case 2: return buttonD14;       // Default D14
    case 3: return buttonRX2;       // Default D16
    case 4: return buttonTX2;       // Default D17
    case 5: return buttonD18;       // Default D18
    case 6: return buttonD21;       // Default D21
    case 7: return buttonD22;       // Default D22
    case 8: return buttonD23;       // Default D23
    case 9: return buttonD25;       // Default D25
    case 10: return buttonD26;      // Default D26
    case 11: return buttonD27;      // Default D27
    case 12: return buttonD32;      // Default D32
    case 13: return buttonD33;      // Default D33
    default: return "Unknown";
  }
}

String getButtonCode(int buttonIndex) {
  // Define button codes based on the index
  switch (buttonIndex) {
    case 0: return "D4";        // Default D4
    case 1: return "D13";       // Default D13
    case 2: return "D14";       // Default D14
    case 3: return "RX2";       // Default D16
    case 4: return "TX2";       // Default D17
    case 5: return "D18";       // Default D18
    case 6: return "D21";       // Default D21
    case 7: return "D22";       // Default D22
    case 8: return "D23";       // Default D23
    case 9: return "D25";       // Default D25
    case 10: return "D26";      // Default D26
    case 11: return "D27";      // Default D27
    case 12: return "D32";      // Default D32
    case 13: return "D33";      // Default D33
    default: return "Unknown";
  }
}
